{"version":3,"sources":["charts/features_usage_rings/data.js","charts/features_usage_rings/FeaturesUsageRings.js","charts/constellation/Constellation.js","App.js","serviceWorker.js","index.js"],"names":["features","id","name","experience","all_years","year","completion","count","percentage","buckets","featuresByCategory","layout","shapes_graphics","interactions","typography","animations_transforms","media_queries","other_features","participation","2019","2020","data","years","categories","normalizedFeatures","map","feature","featureId","category","Object","entries","find","includes","undefined","featureYears","forEach","push","usedBucket","bucket","heardBucket","neverHeardBucket","total","used","heard","neverHeard","awareness","awarenessRatio","usageRatio","normalizedFeature","sort","getNormalizedData","arc","d3Arc","cornerRadius","padAngle","radians","degrees","Math","PI","positionFromAngle","angle","distance","x","cos","y","sin","circleArc","r","startAngle","endAngle","start","end","arcSweep","join","angleStep","length","colors","background","FeaturesUsageRings","currentCategoryAngle","angleGap","categoryWithAngles","index","featureWithAngles","reverse","nodeRadiusScale","scaleLinear","domain","range","width","height","fill","transform","yearRadius","outerRadius","key","stroke","opacity","cy","textAnchor","style","fontSize","fontWeight","pos0","pos1","dominantBaseline","x1","x2","y1","y2","strokeDasharray","yearData","yearRingThickness","pos","radius","cx","fillOpacity","d","innerRadius","xlinkHref","startOffset","diagram","computeCategories","allNodes","allLinks","categoriesNodes","keys","categoryId","categoryLayout","nodes","links","connect","source","target","linkId","parts","generateLinkId","link","featureIds","featureIndex","type","previousFeature","random","randomSibling","linkForce","forceLink","chargeForce","forceManyBody","strength","distanceMin","distanceMax","collisionForce","forceCollide","centerForce","forceCenter","forceSimulation","force","stop","tick","circle","packEnclose","node","pointsArray","hull","polygonHull","centroid","polygonCentroid","computeCategory","ox","oy","children","packSiblings","categoriesNode","deltaX","deltaY","sizeRatio","Chart","Array","from","_","i","RADIUS","strokeWidth","xOffset","strokeLinejoin","Constellation","useState","token","setToken","onClick","previous","App","hashType","to","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.4e85a9ad.chunk.js","sourcesContent":["const features = [\n    {\n        id: 'grid',\n        name: 'Grid',\n        experience: {\n            all_years: [\n                {\n                    year: 2019,\n                    completion: {\n                        count: 11250,\n                        percentage: 99.3,\n                    },\n                    buckets: [\n                        {\n                            id: 'used',\n                            count: 6156,\n                            percentage: 54.7,\n                        },\n                        {\n                            id: 'heard',\n                            count: 4890,\n                            percentage: 43.5,\n                        },\n                        {\n                            id: 'never_heard',\n                            count: 204,\n                            percentage: 1.8,\n                        },\n                    ],\n                },\n                {\n                    year: 2020,\n                    completion: {\n                        count: 2372,\n                        percentage: 98.8,\n                    },\n                    buckets: [\n                        {\n                            id: 'used',\n                            count: 1855,\n                            percentage: 78.2,\n                        },\n                        {\n                            id: 'heard',\n                            count: 501,\n                            percentage: 21.1,\n                        },\n                        {\n                            id: 'never_heard',\n                            count: 16,\n                            percentage: 0.7,\n                        },\n                    ],\n                },\n            ],\n        },\n    },\n    {\n        id: 'subgrid',\n        name: 'Subgrid',\n        experience: {\n            all_years: [\n                {\n                    year: 2020,\n                    completion: {\n                        count: 2358,\n                        percentage: 98.2,\n                    },\n                    buckets: [\n                        {\n                            id: 'heard',\n                            count: 1239,\n                            percentage: 52.5,\n                        },\n                        {\n                            id: 'never_heard',\n                            count: 954,\n                            percentage: 40.5,\n                        },\n                        {\n                            id: 'used',\n                            count: 165,\n                            percentage: 7,\n                        },\n                    ],\n                },\n            ],\n        },\n    },\n    {\n        id: 'flexbox',\n        name: 'Flexbox',\n        experience: {\n            all_years: [\n                {\n                    year: 2019,\n                    completion: {\n                        count: 11284,\n                        percentage: 99.6,\n                    },\n                    buckets: [\n                        {\n                            id: 'used',\n                            count: 10690,\n                            percentage: 94.7,\n                        },\n                        {\n                            id: 'heard',\n                            count: 525,\n                            percentage: 4.7,\n                        },\n                        {\n                            id: 'never_heard',\n                            count: 69,\n                            percentage: 0.6,\n                        },\n                    ],\n                },\n                {\n                    year: 2020,\n                    completion: {\n                        count: 2360,\n                        percentage: 98.3,\n                    },\n                    buckets: [\n                        {\n                            id: 'used',\n                            count: 2322,\n                            percentage: 98.4,\n                        },\n                        {\n                            id: 'heard',\n                            count: 38,\n                            percentage: 1.6,\n                        },\n                    ],\n                },\n            ],\n        },\n    },\n    {\n        id: 'multi_column',\n        name: 'Multi-Column Layout',\n        experience: {\n            all_years: [\n                {\n                    year: 2019,\n                    completion: {\n                        count: 11290,\n                        percentage: 99.6,\n                    },\n                    buckets: [\n                        {\n                            id: 'never_heard',\n                            count: 4613,\n                            percentage: 40.9,\n                        },\n                        {\n                            id: 'used',\n                            count: 3492,\n                            percentage: 30.9,\n                        },\n                        {\n                            id: 'heard',\n                            count: 3185,\n                            percentage: 28.2,\n                        },\n                    ],\n                },\n                {\n                    year: 2020,\n                    completion: {\n                        count: 2352,\n                        percentage: 98,\n                    },\n                    buckets: [\n                        {\n                            id: 'used',\n                            count: 957,\n                            percentage: 40.7,\n                        },\n                        {\n                            id: 'never_heard',\n                            count: 844,\n                            percentage: 35.9,\n                        },\n                        {\n                            id: 'heard',\n                            count: 551,\n                            percentage: 23.4,\n                        },\n                    ],\n                },\n            ],\n        },\n    },\n    {\n        id: 'writing_modes',\n        name: 'Writing Modes',\n        experience: {\n            all_years: [\n                {\n                    year: 2019,\n                    completion: {\n                        count: 11290,\n                        percentage: 99.6,\n                    },\n                    buckets: [\n                        {\n                            id: 'never_heard',\n                            count: 8261,\n                            percentage: 73.2,\n                        },\n                        {\n                            id: 'heard',\n                            count: 2197,\n                            percentage: 19.5,\n                        },\n                        {\n                            id: 'used',\n                            count: 832,\n                            percentage: 7.4,\n                        },\n                    ],\n                },\n                {\n                    year: 2020,\n                    completion: {\n                        count: 2360,\n                        percentage: 98.3,\n                    },\n                    buckets: [\n                        {\n                            id: 'never_heard',\n                            count: 1401,\n                            percentage: 59.4,\n                        },\n                        {\n                            id: 'heard',\n                            count: 632,\n                            percentage: 26.8,\n                        },\n                        {\n                            id: 'used',\n                            count: 327,\n                            percentage: 13.9,\n                        },\n                    ],\n                },\n            ],\n        },\n    },\n    {\n        id: 'exclusions',\n        name: 'Exclusions',\n        experience: {\n            all_years: [\n                {\n                    year: 2019,\n                    completion: {\n                        count: 11283,\n                        percentage: 99.6,\n                    },\n                    buckets: [\n                        {\n                            id: 'never_heard',\n                            count: 8863,\n                            percentage: 78.6,\n                        },\n                        {\n                            id: 'heard',\n                            count: 1618,\n                            percentage: 14.3,\n                        },\n                        {\n                            id: 'used',\n                            count: 802,\n                            percentage: 7.1,\n                        },\n                    ],\n                },\n                {\n                    year: 2020,\n                    completion: {\n                        count: 2358,\n                        percentage: 98.2,\n                    },\n                    buckets: [\n                        {\n                            id: 'never_heard',\n                            count: 1761,\n                            percentage: 74.7,\n                        },\n                        {\n                            id: 'heard',\n                            count: 329,\n                            percentage: 14,\n                        },\n                        {\n                            id: 'used',\n                            count: 268,\n                            percentage: 11.4,\n                        },\n                    ],\n                },\n            ],\n        },\n    },\n    {\n        id: 'position_sticky',\n        name: 'CSS position:sticky',\n        experience: {\n            all_years: [\n                {\n                    year: 2020,\n                    completion: {\n                        count: 2366,\n                        percentage: 98.5,\n                    },\n                    buckets: [\n                        {\n                            id: 'used',\n                            count: 1890,\n                            percentage: 79.9,\n                        },\n                        {\n                            id: 'heard',\n                            count: 364,\n                            percentage: 15.4,\n                        },\n                        {\n                            id: 'never_heard',\n                            count: 112,\n                            percentage: 4.7,\n                        },\n                    ],\n                },\n            ],\n        },\n    },\n    {\n        id: 'logical_properties',\n        name: 'CSS Logical Properties',\n        experience: {\n            all_years: [\n                {\n                    year: 2020,\n                    completion: {\n                        count: 2354,\n                        percentage: 98,\n                    },\n                    buckets: [\n                        {\n                            id: 'never_heard',\n                            count: 1105,\n                            percentage: 46.9,\n                        },\n                        {\n                            id: 'heard',\n                            count: 935,\n                            percentage: 39.7,\n                        },\n                        {\n                            id: 'used',\n                            count: 314,\n                            percentage: 13.3,\n                        },\n                    ],\n                },\n            ],\n        },\n    },\n    {\n        id: 'aspect_ratio',\n        name: 'CSS property: aspect-ratio',\n        experience: {\n            all_years: [\n                {\n                    year: 2020,\n                    completion: {\n                        count: 2361,\n                        percentage: 98.3,\n                    },\n                    buckets: [\n                        {\n                            id: 'heard',\n                            count: 1311,\n                            percentage: 55.5,\n                        },\n                        {\n                            id: 'never_heard',\n                            count: 563,\n                            percentage: 23.8,\n                        },\n                        {\n                            id: 'used',\n                            count: 487,\n                            percentage: 20.6,\n                        },\n                    ],\n                },\n            ],\n        },\n    },\n    {\n        id: 'content_visibility',\n        name: 'CSS content-visibility',\n        experience: {\n            all_years: [\n                {\n                    year: 2020,\n                    completion: {\n                        count: 2362,\n                        percentage: 98.4,\n                    },\n                    buckets: [\n                        {\n                            id: 'heard',\n                            count: 1013,\n                            percentage: 42.9,\n                        },\n                        {\n                            id: 'never_heard',\n                            count: 819,\n                            percentage: 34.7,\n                        },\n                        {\n                            id: 'used',\n                            count: 530,\n                            percentage: 22.4,\n                        },\n                    ],\n                },\n            ],\n        },\n    },\n    {\n        id: 'shapes',\n        name: 'Shapes',\n        experience: {\n            all_years: [\n                {\n                    year: 2019,\n                    completion: {\n                        count: 11263,\n                        percentage: 99.4,\n                    },\n                    buckets: [\n                        {\n                            id: 'heard',\n                            count: 5337,\n                            percentage: 47.4,\n                        },\n                        {\n                            id: 'never_heard',\n                            count: 3495,\n                            percentage: 31,\n                        },\n                        {\n                            id: 'used',\n                            count: 2431,\n                            percentage: 21.6,\n                        },\n                    ],\n                },\n                {\n                    year: 2020,\n                    completion: {\n                        count: 2221,\n                        percentage: 92.5,\n                    },\n                    buckets: [\n                        {\n                            id: 'heard',\n                            count: 905,\n                            percentage: 40.7,\n                        },\n                        {\n                            id: 'never_heard',\n                            count: 722,\n                            percentage: 32.5,\n                        },\n                        {\n                            id: 'used',\n                            count: 594,\n                            percentage: 26.7,\n                        },\n                    ],\n                },\n            ],\n        },\n    },\n    {\n        id: 'object_fit',\n        name: 'object-fit',\n        experience: {\n            all_years: [\n                {\n                    year: 2019,\n                    completion: {\n                        count: 11267,\n                        percentage: 99.4,\n                    },\n                    buckets: [\n                        {\n                            id: 'used',\n                            count: 4798,\n                            percentage: 42.6,\n                        },\n                        {\n                            id: 'never_heard',\n                            count: 4147,\n                            percentage: 36.8,\n                        },\n                        {\n                            id: 'heard',\n                            count: 2322,\n                            percentage: 20.6,\n                        },\n                    ],\n                },\n                {\n                    year: 2020,\n                    completion: {\n                        count: 2220,\n                        percentage: 92.5,\n                    },\n                    buckets: [\n                        {\n                            id: 'used',\n                            count: 1577,\n                            percentage: 71,\n                        },\n                        {\n                            id: 'never_heard',\n                            count: 339,\n                            percentage: 15.3,\n                        },\n                        {\n                            id: 'heard',\n                            count: 304,\n                            percentage: 13.7,\n                        },\n                    ],\n                },\n            ],\n        },\n    },\n    {\n        id: 'clip_path',\n        name: 'clip-path',\n        experience: {\n            all_years: [\n                {\n                    year: 2019,\n                    completion: {\n                        count: 11265,\n                        percentage: 99.4,\n                    },\n                    buckets: [\n                        {\n                            id: 'heard',\n                            count: 4425,\n                            percentage: 39.3,\n                        },\n                        {\n                            id: 'used',\n                            count: 4381,\n                            percentage: 38.9,\n                        },\n                        {\n                            id: 'never_heard',\n                            count: 2459,\n                            percentage: 21.8,\n                        },\n                    ],\n                },\n                {\n                    year: 2020,\n                    completion: {\n                        count: 2224,\n                        percentage: 92.6,\n                    },\n                    buckets: [\n                        {\n                            id: 'used',\n                            count: 1272,\n                            percentage: 57.2,\n                        },\n                        {\n                            id: 'heard',\n                            count: 685,\n                            percentage: 30.8,\n                        },\n                        {\n                            id: 'never_heard',\n                            count: 267,\n                            percentage: 12,\n                        },\n                    ],\n                },\n            ],\n        },\n    },\n    {\n        id: 'masks',\n        name: 'Masking',\n        experience: {\n            all_years: [\n                {\n                    year: 2019,\n                    completion: {\n                        count: 11257,\n                        percentage: 99.4,\n                    },\n                    buckets: [\n                        {\n                            id: 'heard',\n                            count: 5098,\n                            percentage: 45.3,\n                        },\n                        {\n                            id: 'never_heard',\n                            count: 3173,\n                            percentage: 28.2,\n                        },\n                        {\n                            id: 'used',\n                            count: 2986,\n                            percentage: 26.5,\n                        },\n                    ],\n                },\n                {\n                    year: 2020,\n                    completion: {\n                        count: 2235,\n                        percentage: 93.1,\n                    },\n                    buckets: [\n                        {\n                            id: 'heard',\n                            count: 979,\n                            percentage: 43.8,\n                        },\n                        {\n                            id: 'used',\n                            count: 795,\n                            percentage: 35.6,\n                        },\n                        {\n                            id: 'never_heard',\n                            count: 461,\n                            percentage: 20.6,\n                        },\n                    ],\n                },\n            ],\n        },\n    },\n    {\n        id: 'blend_modes',\n        name: 'blend-mode',\n        experience: {\n            all_years: [\n                {\n                    year: 2019,\n                    completion: {\n                        count: 11252,\n                        percentage: 99.3,\n                    },\n                    buckets: [\n                        {\n                            id: 'heard',\n                            count: 4003,\n                            percentage: 35.6,\n                        },\n                        {\n                            id: 'used',\n                            count: 3820,\n                            percentage: 33.9,\n                        },\n                        {\n                            id: 'never_heard',\n                            count: 3429,\n                            percentage: 30.5,\n                        },\n                    ],\n                },\n                {\n                    year: 2020,\n                    completion: {\n                        count: 2226,\n                        percentage: 92.7,\n                    },\n                    buckets: [\n                        {\n                            id: 'used',\n                            count: 908,\n                            percentage: 40.8,\n                        },\n                        {\n                            id: 'heard',\n                            count: 699,\n                            percentage: 31.4,\n                        },\n                        {\n                            id: 'never_heard',\n                            count: 619,\n                            percentage: 27.8,\n                        },\n                    ],\n                },\n            ],\n        },\n    },\n    {\n        id: 'filter_effects',\n        name: 'Filters & Effects',\n        experience: {\n            all_years: [\n                {\n                    year: 2019,\n                    completion: {\n                        count: 11274,\n                        percentage: 99.5,\n                    },\n                    buckets: [\n                        {\n                            id: 'used',\n                            count: 6650,\n                            percentage: 59,\n                        },\n                        {\n                            id: 'heard',\n                            count: 3148,\n                            percentage: 27.9,\n                        },\n                        {\n                            id: 'never_heard',\n                            count: 1476,\n                            percentage: 13.1,\n                        },\n                    ],\n                },\n                {\n                    year: 2020,\n                    completion: {\n                        count: 2233,\n                        percentage: 93,\n                    },\n                    buckets: [\n                        {\n                            id: 'used',\n                            count: 1579,\n                            percentage: 70.7,\n                        },\n                        {\n                            id: 'heard',\n                            count: 457,\n                            percentage: 20.5,\n                        },\n                        {\n                            id: 'never_heard',\n                            count: 197,\n                            percentage: 8.8,\n                        },\n                    ],\n                },\n            ],\n        },\n    },\n    {\n        id: 'backdrop_filter',\n        name: 'backdrop-filter',\n        experience: {\n            all_years: [\n                {\n                    year: 2020,\n                    completion: {\n                        count: 2238,\n                        percentage: 93.2,\n                    },\n                    buckets: [\n                        {\n                            id: 'never_heard',\n                            count: 919,\n                            percentage: 41.1,\n                        },\n                        {\n                            id: 'used',\n                            count: 735,\n                            percentage: 32.8,\n                        },\n                        {\n                            id: 'heard',\n                            count: 584,\n                            percentage: 26.1,\n                        },\n                    ],\n                },\n            ],\n        },\n    },\n    {\n        id: 'scroll_snap',\n        name: 'Scroll Snap',\n        experience: {\n            all_years: [\n                {\n                    year: 2019,\n                    completion: {\n                        count: 11239,\n                        percentage: 99.2,\n                    },\n                    buckets: [\n                        {\n                            id: 'never_heard',\n                            count: 5380,\n                            percentage: 47.9,\n                        },\n                        {\n                            id: 'heard',\n                            count: 4551,\n                            percentage: 40.5,\n                        },\n                        {\n                            id: 'used',\n                            count: 1308,\n                            percentage: 11.6,\n                        },\n                    ],\n                },\n                {\n                    year: 2020,\n                    completion: {\n                        count: 2138,\n                        percentage: 89,\n                    },\n                    buckets: [\n                        {\n                            id: 'heard',\n                            count: 784,\n                            percentage: 36.7,\n                        },\n                        {\n                            id: 'never_heard',\n                            count: 759,\n                            percentage: 35.5,\n                        },\n                        {\n                            id: 'used',\n                            count: 595,\n                            percentage: 27.8,\n                        },\n                    ],\n                },\n            ],\n        },\n    },\n    {\n        id: 'overscroll_behavior',\n        name: 'overscroll-behavior',\n        experience: {\n            all_years: [\n                {\n                    year: 2019,\n                    completion: {\n                        count: 11230,\n                        percentage: 99.1,\n                    },\n                    buckets: [\n                        {\n                            id: 'never_heard',\n                            count: 6527,\n                            percentage: 58.1,\n                        },\n                        {\n                            id: 'heard',\n                            count: 2462,\n                            percentage: 21.9,\n                        },\n                        {\n                            id: 'used',\n                            count: 2241,\n                            percentage: 20,\n                        },\n                    ],\n                },\n                {\n                    year: 2020,\n                    completion: {\n                        count: 2139,\n                        percentage: 89.1,\n                    },\n                    buckets: [\n                        {\n                            id: 'never_heard',\n                            count: 1112,\n                            percentage: 52,\n                        },\n                        {\n                            id: 'used',\n                            count: 519,\n                            percentage: 24.3,\n                        },\n                        {\n                            id: 'heard',\n                            count: 508,\n                            percentage: 23.7,\n                        },\n                    ],\n                },\n            ],\n        },\n    },\n    {\n        id: 'overflow_anchor',\n        name: 'overflow-anchor',\n        experience: {\n            all_years: [\n                {\n                    year: 2019,\n                    completion: {\n                        count: 11242,\n                        percentage: 99.2,\n                    },\n                    buckets: [\n                        {\n                            id: 'never_heard',\n                            count: 8775,\n                            percentage: 78.1,\n                        },\n                        {\n                            id: 'heard',\n                            count: 1646,\n                            percentage: 14.6,\n                        },\n                        {\n                            id: 'used',\n                            count: 821,\n                            percentage: 7.3,\n                        },\n                    ],\n                },\n                {\n                    year: 2020,\n                    completion: {\n                        count: 2141,\n                        percentage: 89.2,\n                    },\n                    buckets: [\n                        {\n                            id: 'never_heard',\n                            count: 1583,\n                            percentage: 73.9,\n                        },\n                        {\n                            id: 'heard',\n                            count: 385,\n                            percentage: 18,\n                        },\n                        {\n                            id: 'used',\n                            count: 173,\n                            percentage: 8.1,\n                        },\n                    ],\n                },\n            ],\n        },\n    },\n    {\n        id: 'touch_action',\n        name: 'touch-action',\n        experience: {\n            all_years: [\n                {\n                    year: 2020,\n                    completion: {\n                        count: 2140,\n                        percentage: 89.1,\n                    },\n                    buckets: [\n                        {\n                            id: 'never_heard',\n                            count: 1268,\n                            percentage: 59.3,\n                        },\n                        {\n                            id: 'heard',\n                            count: 494,\n                            percentage: 23.1,\n                        },\n                        {\n                            id: 'used',\n                            count: 378,\n                            percentage: 17.7,\n                        },\n                    ],\n                },\n            ],\n        },\n    },\n    {\n        id: 'pointer_events',\n        name: 'pointer-events',\n        experience: {\n            all_years: [\n                {\n                    year: 2020,\n                    completion: {\n                        count: 2152,\n                        percentage: 89.6,\n                    },\n                    buckets: [\n                        {\n                            id: 'used',\n                            count: 1566,\n                            percentage: 72.8,\n                        },\n                        {\n                            id: 'never_heard',\n                            count: 326,\n                            percentage: 15.1,\n                        },\n                        {\n                            id: 'heard',\n                            count: 260,\n                            percentage: 12.1,\n                        },\n                    ],\n                },\n            ],\n        },\n    },\n    {\n        id: 'web_fonts',\n        name: '@font-face\\n',\n        experience: {\n            all_years: [\n                {\n                    year: 2019,\n                    completion: {\n                        count: 11252,\n                        percentage: 99.3,\n                    },\n                    buckets: [\n                        {\n                            id: 'used',\n                            count: 10510,\n                            percentage: 93.4,\n                        },\n                        {\n                            id: 'heard',\n                            count: 547,\n                            percentage: 4.9,\n                        },\n                        {\n                            id: 'never_heard',\n                            count: 195,\n                            percentage: 1.7,\n                        },\n                    ],\n                },\n                {\n                    year: 2020,\n                    completion: {\n                        count: 2114,\n                        percentage: 88,\n                    },\n                    buckets: [\n                        {\n                            id: 'used',\n                            count: 2001,\n                            percentage: 94.7,\n                        },\n                        {\n                            id: 'heard',\n                            count: 80,\n                            percentage: 3.8,\n                        },\n                        {\n                            id: 'never_heard',\n                            count: 33,\n                            percentage: 1.6,\n                        },\n                    ],\n                },\n            ],\n        },\n    },\n    {\n        id: 'line_breaking',\n        name: 'Line Breaking Properties',\n        experience: {\n            all_years: [\n                {\n                    year: 2019,\n                    completion: {\n                        count: 11260,\n                        percentage: 99.4,\n                    },\n                    buckets: [\n                        {\n                            id: 'used',\n                            count: 9902,\n                            percentage: 87.9,\n                        },\n                        {\n                            id: 'heard',\n                            count: 947,\n                            percentage: 8.4,\n                        },\n                        {\n                            id: 'never_heard',\n                            count: 411,\n                            percentage: 3.7,\n                        },\n                    ],\n                },\n                {\n                    year: 2020,\n                    completion: {\n                        count: 2126,\n                        percentage: 88.5,\n                    },\n                    buckets: [\n                        {\n                            id: 'used',\n                            count: 1831,\n                            percentage: 86.1,\n                        },\n                        {\n                            id: 'heard',\n                            count: 184,\n                            percentage: 8.7,\n                        },\n                        {\n                            id: 'never_heard',\n                            count: 111,\n                            percentage: 5.2,\n                        },\n                    ],\n                },\n            ],\n        },\n    },\n    {\n        id: 'font_variant',\n        name: 'font-variant',\n        experience: {\n            all_years: [\n                {\n                    year: 2019,\n                    completion: {\n                        count: 11231,\n                        percentage: 99.1,\n                    },\n                    buckets: [\n                        {\n                            id: 'never_heard',\n                            count: 5288,\n                            percentage: 47.1,\n                        },\n                        {\n                            id: 'heard',\n                            count: 3210,\n                            percentage: 28.6,\n                        },\n                        {\n                            id: 'used',\n                            count: 2733,\n                            percentage: 24.3,\n                        },\n                    ],\n                },\n                {\n                    year: 2020,\n                    completion: {\n                        count: 2124,\n                        percentage: 88.5,\n                    },\n                    buckets: [\n                        {\n                            id: 'never_heard',\n                            count: 907,\n                            percentage: 42.7,\n                        },\n                        {\n                            id: 'heard',\n                            count: 668,\n                            percentage: 31.5,\n                        },\n                        {\n                            id: 'used',\n                            count: 549,\n                            percentage: 25.8,\n                        },\n                    ],\n                },\n            ],\n        },\n    },\n    {\n        id: 'initial_letter',\n        name: 'initial_letter',\n        experience: {\n            all_years: [\n                {\n                    year: 2019,\n                    completion: {\n                        count: 11250,\n                        percentage: 99.3,\n                    },\n                    buckets: [\n                        {\n                            id: 'never_heard',\n                            count: 4040,\n                            percentage: 35.9,\n                        },\n                        {\n                            id: 'heard',\n                            count: 4017,\n                            percentage: 35.7,\n                        },\n                        {\n                            id: 'used',\n                            count: 3193,\n                            percentage: 28.4,\n                        },\n                    ],\n                },\n                {\n                    year: 2020,\n                    completion: {\n                        count: 2128,\n                        percentage: 88.6,\n                    },\n                    buckets: [\n                        {\n                            id: 'never_heard',\n                            count: 770,\n                            percentage: 36.2,\n                        },\n                        {\n                            id: 'heard',\n                            count: 756,\n                            percentage: 35.5,\n                        },\n                        {\n                            id: 'used',\n                            count: 602,\n                            percentage: 28.3,\n                        },\n                    ],\n                },\n            ],\n        },\n    },\n    {\n        id: 'font_variant_numeric',\n        name: 'font-variant-numeric',\n        experience: {\n            all_years: [\n                {\n                    year: 2020,\n                    completion: {\n                        count: 2122,\n                        percentage: 88.4,\n                    },\n                    buckets: [\n                        {\n                            id: 'never_heard',\n                            count: 1253,\n                            percentage: 59,\n                        },\n                        {\n                            id: 'heard',\n                            count: 481,\n                            percentage: 22.7,\n                        },\n                        {\n                            id: 'used',\n                            count: 388,\n                            percentage: 18.3,\n                        },\n                    ],\n                },\n            ],\n        },\n    },\n    {\n        id: 'font_display',\n        name: 'font-display',\n        experience: {\n            all_years: [\n                {\n                    year: 2020,\n                    completion: {\n                        count: 2130,\n                        percentage: 88.7,\n                    },\n                    buckets: [\n                        {\n                            id: 'used',\n                            count: 958,\n                            percentage: 45,\n                        },\n                        {\n                            id: 'never_heard',\n                            count: 786,\n                            percentage: 36.9,\n                        },\n                        {\n                            id: 'heard',\n                            count: 386,\n                            percentage: 18.1,\n                        },\n                    ],\n                },\n            ],\n        },\n    },\n    {\n        id: 'line_clamp',\n        name: 'line-clamp',\n        experience: {\n            all_years: [\n                {\n                    year: 2020,\n                    completion: {\n                        count: 2128,\n                        percentage: 88.6,\n                    },\n                    buckets: [\n                        {\n                            id: 'never_heard',\n                            count: 1079,\n                            percentage: 50.7,\n                        },\n                        {\n                            id: 'heard',\n                            count: 545,\n                            percentage: 25.6,\n                        },\n                        {\n                            id: 'used',\n                            count: 504,\n                            percentage: 23.7,\n                        },\n                    ],\n                },\n            ],\n        },\n    },\n    {\n        id: 'direction',\n        name: 'direction',\n        experience: {\n            all_years: [\n                {\n                    year: 2020,\n                    completion: {\n                        count: 2130,\n                        percentage: 88.7,\n                    },\n                    buckets: [\n                        {\n                            id: 'heard',\n                            count: 865,\n                            percentage: 40.6,\n                        },\n                        {\n                            id: 'used',\n                            count: 651,\n                            percentage: 30.6,\n                        },\n                        {\n                            id: 'never_heard',\n                            count: 614,\n                            percentage: 28.8,\n                        },\n                    ],\n                },\n            ],\n        },\n    },\n    {\n        id: 'transitions',\n        name: 'Transitions',\n        experience: {\n            all_years: [\n                {\n                    year: 2019,\n                    completion: {\n                        count: 11179,\n                        percentage: 98.7,\n                    },\n                    buckets: [\n                        {\n                            id: 'used',\n                            count: 10609,\n                            percentage: 94.9,\n                        },\n                        {\n                            id: 'heard',\n                            count: 498,\n                            percentage: 4.5,\n                        },\n                        {\n                            id: 'never_heard',\n                            count: 72,\n                            percentage: 0.6,\n                        },\n                    ],\n                },\n                {\n                    year: 2020,\n                    completion: {\n                        count: 2077,\n                        percentage: 86.5,\n                    },\n                    buckets: [\n                        {\n                            id: 'used',\n                            count: 1980,\n                            percentage: 95.3,\n                        },\n                        {\n                            id: 'heard',\n                            count: 70,\n                            percentage: 3.4,\n                        },\n                        {\n                            id: 'never_heard',\n                            count: 27,\n                            percentage: 1.3,\n                        },\n                    ],\n                },\n            ],\n        },\n    },\n    {\n        id: 'transforms',\n        name: 'Transforms',\n        experience: {\n            all_years: [\n                {\n                    year: 2019,\n                    completion: {\n                        count: 11165,\n                        percentage: 98.5,\n                    },\n                    buckets: [\n                        {\n                            id: 'used',\n                            count: 10554,\n                            percentage: 94.5,\n                        },\n                        {\n                            id: 'heard',\n                            count: 473,\n                            percentage: 4.2,\n                        },\n                        {\n                            id: 'never_heard',\n                            count: 138,\n                            percentage: 1.2,\n                        },\n                    ],\n                },\n                {\n                    year: 2020,\n                    completion: {\n                        count: 2088,\n                        percentage: 87,\n                    },\n                    buckets: [\n                        {\n                            id: 'used',\n                            count: 2004,\n                            percentage: 96,\n                        },\n                        {\n                            id: 'heard',\n                            count: 71,\n                            percentage: 3.4,\n                        },\n                        {\n                            id: 'never_heard',\n                            count: 13,\n                            percentage: 0.6,\n                        },\n                    ],\n                },\n            ],\n        },\n    },\n    {\n        id: 'animations',\n        name: 'Animations',\n        experience: {\n            all_years: [\n                {\n                    year: 2019,\n                    completion: {\n                        count: 11253,\n                        percentage: 99.3,\n                    },\n                    buckets: [\n                        {\n                            id: 'used',\n                            count: 10131,\n                            percentage: 90,\n                        },\n                        {\n                            id: 'heard',\n                            count: 968,\n                            percentage: 8.6,\n                        },\n                        {\n                            id: 'never_heard',\n                            count: 154,\n                            percentage: 1.4,\n                        },\n                    ],\n                },\n                {\n                    year: 2020,\n                    completion: {\n                        count: 2085,\n                        percentage: 86.8,\n                    },\n                    buckets: [\n                        {\n                            id: 'used',\n                            count: 1954,\n                            percentage: 93.7,\n                        },\n                        {\n                            id: 'heard',\n                            count: 116,\n                            percentage: 5.6,\n                        },\n                        {\n                            id: 'never_heard',\n                            count: 15,\n                            percentage: 0.7,\n                        },\n                    ],\n                },\n            ],\n        },\n    },\n    {\n        id: 'perspective',\n        name: 'Perspective',\n        experience: {\n            all_years: [\n                {\n                    year: 2020,\n                    completion: {\n                        count: 2091,\n                        percentage: 87.1,\n                    },\n                    buckets: [\n                        {\n                            id: 'used',\n                            count: 908,\n                            percentage: 43.4,\n                        },\n                        {\n                            id: 'never_heard',\n                            count: 628,\n                            percentage: 30,\n                        },\n                        {\n                            id: 'heard',\n                            count: 555,\n                            percentage: 26.5,\n                        },\n                    ],\n                },\n            ],\n        },\n    },\n    {\n        id: 'prefers_reduced_motion',\n        name: 'prefers-reduced-motion',\n        experience: {\n            all_years: [\n                {\n                    year: 2020,\n                    completion: {\n                        count: 2061,\n                        percentage: 85.8,\n                    },\n                    buckets: [\n                        {\n                            id: 'heard',\n                            count: 836,\n                            percentage: 40.6,\n                        },\n                        {\n                            id: 'never_heard',\n                            count: 760,\n                            percentage: 36.9,\n                        },\n                        {\n                            id: 'used',\n                            count: 465,\n                            percentage: 22.6,\n                        },\n                    ],\n                },\n            ],\n        },\n    },\n    {\n        id: 'prefers_color_scheme',\n        name: 'prefers-color-scheme',\n        experience: {\n            all_years: [\n                {\n                    year: 2020,\n                    completion: {\n                        count: 2062,\n                        percentage: 85.9,\n                    },\n                    buckets: [\n                        {\n                            id: 'heard',\n                            count: 870,\n                            percentage: 42.2,\n                        },\n                        {\n                            id: 'never_heard',\n                            count: 631,\n                            percentage: 30.6,\n                        },\n                        {\n                            id: 'used',\n                            count: 561,\n                            percentage: 27.2,\n                        },\n                    ],\n                },\n            ],\n        },\n    },\n    {\n        id: 'color_gamut',\n        name: 'color-gamut',\n        experience: {\n            all_years: [\n                {\n                    year: 2020,\n                    completion: {\n                        count: 2070,\n                        percentage: 86.2,\n                    },\n                    buckets: [\n                        {\n                            id: 'never_heard',\n                            count: 1705,\n                            percentage: 82.4,\n                        },\n                        {\n                            id: 'heard',\n                            count: 341,\n                            percentage: 16.5,\n                        },\n                        {\n                            id: 'used',\n                            count: 24,\n                            percentage: 1.2,\n                        },\n                    ],\n                },\n            ],\n        },\n    },\n    {\n        id: 'variables',\n        name: 'Variables',\n        experience: {\n            all_years: [\n                {\n                    year: 2019,\n                    completion: {\n                        count: 11244,\n                        percentage: 99.2,\n                    },\n                    buckets: [\n                        {\n                            id: 'used',\n                            count: 6691,\n                            percentage: 59.5,\n                        },\n                        {\n                            id: 'heard',\n                            count: 3964,\n                            percentage: 35.3,\n                        },\n                        {\n                            id: 'never_heard',\n                            count: 589,\n                            percentage: 5.2,\n                        },\n                    ],\n                },\n                {\n                    year: 2020,\n                    completion: {\n                        count: 2038,\n                        percentage: 84.9,\n                    },\n                    buckets: [\n                        {\n                            id: 'used',\n                            count: 1621,\n                            percentage: 79.5,\n                        },\n                        {\n                            id: 'heard',\n                            count: 358,\n                            percentage: 17.6,\n                        },\n                        {\n                            id: 'never_heard',\n                            count: 59,\n                            percentage: 2.9,\n                        },\n                    ],\n                },\n            ],\n        },\n    },\n    {\n        id: 'feature_support_queries',\n        name: '@supports',\n        experience: {\n            all_years: [\n                {\n                    year: 2019,\n                    completion: {\n                        count: 11250,\n                        percentage: 99.3,\n                    },\n                    buckets: [\n                        {\n                            id: 'used',\n                            count: 4147,\n                            percentage: 36.9,\n                        },\n                        {\n                            id: 'heard',\n                            count: 4072,\n                            percentage: 36.2,\n                        },\n                        {\n                            id: 'never_heard',\n                            count: 3031,\n                            percentage: 26.9,\n                        },\n                    ],\n                },\n                {\n                    year: 2020,\n                    completion: {\n                        count: 2036,\n                        percentage: 84.8,\n                    },\n                    buckets: [\n                        {\n                            id: 'used',\n                            count: 1031,\n                            percentage: 50.6,\n                        },\n                        {\n                            id: 'heard',\n                            count: 594,\n                            percentage: 29.2,\n                        },\n                        {\n                            id: 'never_heard',\n                            count: 411,\n                            percentage: 20.2,\n                        },\n                    ],\n                },\n            ],\n        },\n    },\n    {\n        id: 'containment',\n        name: 'Contain',\n        experience: {\n            all_years: [\n                {\n                    year: 2019,\n                    completion: {\n                        count: 11226,\n                        percentage: 99.1,\n                    },\n                    buckets: [\n                        {\n                            id: 'never_heard',\n                            count: 9316,\n                            percentage: 83,\n                        },\n                        {\n                            id: 'heard',\n                            count: 1375,\n                            percentage: 12.2,\n                        },\n                        {\n                            id: 'used',\n                            count: 535,\n                            percentage: 4.8,\n                        },\n                    ],\n                },\n                {\n                    year: 2020,\n                    completion: {\n                        count: 2040,\n                        percentage: 85,\n                    },\n                    buckets: [\n                        {\n                            id: 'never_heard',\n                            count: 1582,\n                            percentage: 77.5,\n                        },\n                        {\n                            id: 'heard',\n                            count: 310,\n                            percentage: 15.2,\n                        },\n                        {\n                            id: 'used',\n                            count: 148,\n                            percentage: 7.3,\n                        },\n                    ],\n                },\n            ],\n        },\n    },\n    {\n        id: 'will_change',\n        name: 'will-change',\n        experience: {\n            all_years: [\n                {\n                    year: 2019,\n                    completion: {\n                        count: 11234,\n                        percentage: 99.2,\n                    },\n                    buckets: [\n                        {\n                            id: 'never_heard',\n                            count: 6542,\n                            percentage: 58.2,\n                        },\n                        {\n                            id: 'used',\n                            count: 2670,\n                            percentage: 23.8,\n                        },\n                        {\n                            id: 'heard',\n                            count: 2022,\n                            percentage: 18,\n                        },\n                    ],\n                },\n                {\n                    year: 2020,\n                    completion: {\n                        count: 2039,\n                        percentage: 84.9,\n                    },\n                    buckets: [\n                        {\n                            id: 'never_heard',\n                            count: 898,\n                            percentage: 44,\n                        },\n                        {\n                            id: 'used',\n                            count: 758,\n                            percentage: 37.2,\n                        },\n                        {\n                            id: 'heard',\n                            count: 383,\n                            percentage: 18.8,\n                        },\n                    ],\n                },\n            ],\n        },\n    },\n    {\n        id: 'calc',\n        name: 'calc()',\n        experience: {\n            all_years: [\n                {\n                    year: 2019,\n                    completion: {\n                        count: 11257,\n                        percentage: 99.4,\n                    },\n                    buckets: [\n                        {\n                            id: 'used',\n                            count: 9693,\n                            percentage: 86.1,\n                        },\n                        {\n                            id: 'heard',\n                            count: 1043,\n                            percentage: 9.3,\n                        },\n                        {\n                            id: 'never_heard',\n                            count: 521,\n                            percentage: 4.6,\n                        },\n                    ],\n                },\n                {\n                    year: 2020,\n                    completion: {\n                        count: 2040,\n                        percentage: 85,\n                    },\n                    buckets: [\n                        {\n                            id: 'used',\n                            count: 1890,\n                            percentage: 92.6,\n                        },\n                        {\n                            id: 'heard',\n                            count: 112,\n                            percentage: 5.5,\n                        },\n                        {\n                            id: 'never_heard',\n                            count: 38,\n                            percentage: 1.9,\n                        },\n                    ],\n                },\n            ],\n        },\n    },\n    {\n        id: 'houdini',\n        name: 'CSS Houdini',\n        experience: {\n            all_years: [\n                {\n                    year: 2020,\n                    completion: {\n                        count: 2035,\n                        percentage: 84.8,\n                    },\n                    buckets: [\n                        {\n                            id: 'never_heard',\n                            count: 1021,\n                            percentage: 50.2,\n                        },\n                        {\n                            id: 'heard',\n                            count: 969,\n                            percentage: 47.6,\n                        },\n                        {\n                            id: 'used',\n                            count: 45,\n                            percentage: 2.2,\n                        },\n                    ],\n                },\n            ],\n        },\n    },\n    {\n        id: 'comparison_functions',\n        name: 'CSS Comparison Functions',\n        experience: {\n            all_years: [\n                {\n                    year: 2020,\n                    completion: {\n                        count: 2042,\n                        percentage: 85,\n                    },\n                    buckets: [\n                        {\n                            id: 'used',\n                            count: 977,\n                            percentage: 47.8,\n                        },\n                        {\n                            id: 'heard',\n                            count: 796,\n                            percentage: 39,\n                        },\n                        {\n                            id: 'never_heard',\n                            count: 269,\n                            percentage: 13.2,\n                        },\n                    ],\n                },\n            ],\n        },\n    },\n]\n\nconst featuresByCategory = {\n    layout: [\n        'grid',\n        'subgrid',\n        'flexbox',\n        'multi_column',\n        'writing_modes',\n        'exclusions',\n        'position_sticky',\n        'logical_properties',\n        'aspect_ratio',\n        'content_visibility',\n    ],\n    shapes_graphics: [\n        'shapes',\n        'object_fit',\n        'clip_path',\n        'masks',\n        'blend_modes',\n        'filter_effects',\n        'backdrop_filter',\n    ],\n    interactions: [\n        'scroll_snap',\n        'overscroll_behavior',\n        'overflow_anchor',\n        'touch_action',\n        'pointer_events',\n    ],\n    typography: [\n        'web_fonts',\n        'variables_fonts',\n        'line_breaking',\n        'font_variant',\n        'initial_letter',\n        'font_variant_numeric',\n        'font_display',\n        'line_clamp',\n        'direction',\n    ],\n    animations_transforms: ['transitions', 'transforms', 'animations', 'perspective'],\n    media_queries: ['prefers_reduced_motion', 'prefers_color_scheme', 'color_gamut'],\n    other_features: [\n        'variables',\n        'feature_support_queries',\n        'containment',\n        'will_change',\n        'calc',\n        'houdini',\n        'comparison_functions',\n    ],\n}\n\nexport const getFeatureCategory = (featureId) => {\n    const categories = Object.entries(featuresByCategory)\n\n    const category = categories.find(([categoryId, featureIds]) => featureIds.includes(featureId))\n\n    return category[0]\n}\n\nconst participation = {\n    2019: 11330,\n    2020: 2402,\n}\n\nexport const getNormalizedData = () => {\n    const years = []\n    let categories = {}\n\n    const normalizedFeatures = features.map((feature) => {\n        const category = getFeatureCategory(feature.id)\n        if (categories[category] === undefined) {\n            categories[category] = []\n        }\n\n        const featureYears = {}\n        feature.experience.all_years.forEach((year) => {\n            if (!years.includes(year.year)) {\n                years.push(year.year)\n            }\n\n            const usedBucket = year.buckets.find((bucket) => bucket.id === 'used')\n            const heardBucket = year.buckets.find((bucket) => bucket.id === 'heard')\n            const neverHeardBucket = year.buckets.find((bucket) => bucket.id === 'never_heard')\n\n            featureYears[year.year] = {\n                total: year.completion.count,\n                used: usedBucket ? usedBucket.count : 0,\n                heard: heardBucket ? heardBucket.count : 0,\n                neverHeard: neverHeardBucket ? neverHeardBucket.count : 0,\n            }\n            featureYears[year.year].awareness =\n                featureYears[year.year].used + featureYears[year.year].heard\n            featureYears[year.year].awarenessRatio =\n                featureYears[year.year].awareness / participation[year.year]\n            featureYears[year.year].usageRatio =\n                featureYears[year.year].used / featureYears[year.year].awareness\n        })\n\n        const normalizedFeature = {\n            category,\n            id: feature.id,\n            name: feature.name,\n            years: featureYears,\n        }\n\n        categories[category].push(normalizedFeature)\n\n        return normalizedFeature\n    })\n\n    years.sort()\n\n    categories = Object.entries(categories).map(([category, categoryFeatures]) => ({\n        id: category,\n        features: categoryFeatures,\n    }))\n\n    return {\n        years,\n        categories,\n        features: normalizedFeatures,\n    }\n}\n","import React, { Fragment } from 'react'\nimport { arc as d3Arc } from 'd3-shape'\nimport { scaleLinear } from 'd3-scale'\nimport { getNormalizedData } from './data'\n\nconst data = getNormalizedData()\n\nconst arc = d3Arc().cornerRadius(3).padAngle(0.004)\n\nconst radians = (degrees) => (degrees * Math.PI) / 180\nconst degrees = (radians) => (radians * 180) / Math.PI\n\nconst positionFromAngle = (angle, distance) => ({\n    x: Math.cos(angle - Math.PI / 2) * distance,\n    y: Math.sin(angle - Math.PI / 2) * distance,\n})\n\nconst circleArc = (r, startAngle, endAngle) => {\n    const start = positionFromAngle(endAngle, r)\n    const end = positionFromAngle(startAngle, r)\n\n    const arcSweep = endAngle - startAngle <= 180 ? '0' : '1'\n\n    const d = ['M', start.x, start.y, 'A', r, r, 0, arcSweep, 0, end.x, end.y].join(' ')\n\n    return d\n}\n\nconst outerRadius = 440\nconst categoriesRingThickness = 50\nconst yearRingThickness = 70\n\nconst maxNodeRadius = 24\n\nconst angleGap = 15\nconst angleStep = radians((360 - angleGap) / data.features.length)\n\nconst colors = {\n    background: '#f1eff0',\n\n    layout: '#b58389',\n    shapes_graphics: '#e8afaf',\n    interactions: '#f1796f',\n    typography: '#d59a6e',\n    animations_transforms: '#ebad36',\n    media_queries: '#74baaf',\n    other_features: '#884b58',\n}\n\nexport const FeaturesUsageRings = () => {\n    let currentCategoryAngle = radians(angleGap / 2)\n    const categories = data.categories.map((category) => {\n        const categoryWithAngles = {\n            ...category,\n            startAngle: currentCategoryAngle,\n            endAngle: currentCategoryAngle + category.features.length * angleStep,\n        }\n        categoryWithAngles.features = category.features.map((feature, index) => {\n            const featureWithAngles = {\n                ...feature,\n                startAngle: categoryWithAngles.startAngle + index * angleStep,\n                endAngle: categoryWithAngles.startAngle + (index + 1) * angleStep,\n            }\n            featureWithAngles.angle = featureWithAngles.startAngle + angleStep / 2\n\n            return featureWithAngles\n        })\n\n        currentCategoryAngle = categoryWithAngles.endAngle\n\n        return categoryWithAngles\n    })\n\n    let years = [...data.years]\n    years.reverse()\n    years = years.map((year, index) => ({\n        year,\n        index,\n    }))\n\n    const nodeRadiusScale = scaleLinear().domain([0, 1]).range([0, maxNodeRadius])\n\n    return (\n        <svg width={1400} height={1000}>\n            <rect width={1400} height={1000} fill={colors.background} />\n            <g transform={`translate(450, 450)`}>\n                {/*\n                {years.map(year => {\n                    const yearOuterRadius = outerRadius - categoriesRingThickness - year.index * yearRingThickness\n\n                    return (\n                        <Fragment key={year.year}>\n                            <linearGradient id={`${year.year}Gradient`} gradientTransform=\"rotate(90)\">\n                                <stop offset=\"20%\"  stopColor=\"#000000\" stopOpacity={0} />\n                                <stop offset=\"80%\" stopColor=\"#000000\" stopOpacity={1} />\n                            </linearGradient>\n                            <path\n                                fill={`url(#${year.year}Gradient)`}\n                                opacity={years.length * 0.04 - year.index * 0.04}\n                                d={arc({\n                                    innerRadius: yearOuterRadius - yearRingThickness,\n                                    outerRadius: yearOuterRadius,\n                                    startAngle: 0,\n                                    endAngle: radians(180),\n                                })}\n                            />\n                            <path\n                                fill=\"#000000\"\n                                opacity={years.length * 0.04 - year.index * 0.04}\n                                d={arc({\n                                    innerRadius: yearOuterRadius - yearRingThickness,\n                                    outerRadius: yearOuterRadius,\n                                    startAngle: radians(180),\n                                    endAngle: radians(360),\n                                })}\n                            />\n                            <rect\n                                opacity={years.length * 0.04 - year.index * 0.04}\n                                y={-yearOuterRadius}\n                                height={yearRingThickness}\n                                width={outerRadius * 1.2}\n                            />\n                            <text\n                                x={outerRadius * 1.17}\n                                y={-yearOuterRadius + yearRingThickness * .83}\n                                textAnchor=\"end\"\n                                opacity={.33}\n                                style={{\n                                    fontSize: 14,\n                                    fontWeight: 600\n                                }}\n                            >\n                                {year.year}\n                            </text>\n                        </Fragment>\n                    )\n                })}\n                */}\n                {years.map((year) => {\n                    const yearRadius =\n                        outerRadius -\n                        categoriesRingThickness -\n                        (year.index + 0.5) * yearRingThickness\n\n                    return (\n                        <g key={year.year}>\n                            <circle\n                                r={yearRadius}\n                                stroke=\"rgb(136, 75, 88)\"\n                                opacity={0.3}\n                                fill=\"none\"\n                            />\n                            <circle r={3} cy={-yearRadius} fill=\"rgb(136, 75, 88)\" />\n                            <text\n                                y={-yearRadius - 12}\n                                textAnchor=\"middle\"\n                                fill=\"rgb(136, 75, 88)\"\n                                style={{\n                                    fontSize: 14,\n                                    fontWeight: 600,\n                                }}\n                            >\n                                {year.year}\n                            </text>\n                        </g>\n                    )\n                })}\n                <g>\n                    {categories.map((category) => {\n                        return (\n                            <Fragment key={category.id}>\n                                {category.features.map((feature) => {\n                                    const pos0 = positionFromAngle(\n                                        feature.angle,\n                                        outerRadius - categoriesRingThickness\n                                    )\n                                    const pos1 = positionFromAngle(feature.angle, 240)\n\n                                    return (\n                                        <Fragment key={feature.id}>\n                                            <g\n                                                transform={`rotate(${degrees(\n                                                    feature.angle - Math.PI / 2\n                                                )})`}\n                                            >\n                                                <g transform={`translate(230, 0)`}>\n                                                    <text\n                                                        fill={colors[category.id]}\n                                                        textAnchor=\"end\"\n                                                        dominantBaseline=\"middle\"\n                                                        style={{\n                                                            fontSize: 10,\n                                                            fontWeight: 600,\n                                                        }}\n                                                    >\n                                                        {feature.id}\n                                                    </text>\n                                                </g>\n                                            </g>\n                                            <line\n                                                stroke={colors[category.id]}\n                                                x1={pos1.x}\n                                                x2={pos0.x}\n                                                y1={pos1.y}\n                                                y2={pos0.y}\n                                                strokeDasharray={`3 4`}\n                                                opacity={1}\n                                            />\n                                        </Fragment>\n                                    )\n                                })}\n                            </Fragment>\n                        )\n                    })}\n                </g>\n                <g>\n                    {categories.map((category) => {\n                        return (\n                            <Fragment key={category.id}>\n                                {category.features.map((feature) => {\n                                    return (\n                                        <Fragment key={feature.id}>\n                                            {years.map((year) => {\n                                                const yearData = feature.years[year.year]\n\n                                                if (yearData === undefined) {\n                                                    return null\n                                                }\n\n                                                const distance =\n                                                    outerRadius -\n                                                    categoriesRingThickness -\n                                                    (year.index + 1) * yearRingThickness +\n                                                    yearRingThickness * 0.5\n                                                const pos = positionFromAngle(\n                                                    feature.angle,\n                                                    distance\n                                                )\n\n                                                const radius = nodeRadiusScale(\n                                                    yearData.awarenessRatio\n                                                )\n\n                                                return (\n                                                    <Fragment key={year.year}>\n                                                        <circle\n                                                            cx={pos.x}\n                                                            cy={pos.y}\n                                                            r={radius}\n                                                            fill={colors[category.id]}\n                                                            fillOpacity={0.4}\n                                                        />\n                                                        <circle\n                                                            cx={pos.x}\n                                                            cy={pos.y}\n                                                            r={radius * yearData.usageRatio}\n                                                            fill={colors[category.id]}\n                                                        />\n                                                    </Fragment>\n                                                )\n                                            })}\n                                        </Fragment>\n                                    )\n                                })}\n                            </Fragment>\n                        )\n                    })}\n                </g>\n                {categories.map((category) => {\n                    return (\n                        <g key={category.id} id={category.id}>\n                            <path\n                                fill={colors[category.id]}\n                                d={arc({\n                                    innerRadius: outerRadius - categoriesRingThickness,\n                                    outerRadius: outerRadius,\n                                    startAngle: category.startAngle,\n                                    endAngle: category.endAngle,\n                                })}\n                            />\n                            <defs>\n                                <path\n                                    id={`category_${category.id}_path`}\n                                    d={circleArc(\n                                        outerRadius - categoriesRingThickness * 0.5,\n                                        category.startAngle,\n                                        category.endAngle\n                                    )}\n                                />\n                            </defs>\n                            <text\n                                style={{\n                                    fontWeight: 600,\n                                }}\n                                fill=\"#ffffff\"\n                                textAnchor=\"middle\"\n                                dominantBaseline=\"middle\"\n                            >\n                                <textPath\n                                    xlinkHref={`#category_${category.id}_path`}\n                                    startOffset=\"50%\"\n                                >\n                                    {category.id}\n                                </textPath>\n                            </text>\n                        </g>\n                    )\n                })}\n            </g>\n        </svg>\n    )\n}\n","import React, { useState, Fragment } from 'react'\nimport { random } from 'lodash'\nimport { polygonCentroid, polygonHull } from 'd3-polygon'\nimport { forceSimulation, forceLink, forceCenter, forceManyBody, forceCollide } from 'd3-force'\nimport { packEnclose, packSiblings } from 'd3-hierarchy'\n\nconst featuresByCategory = {\n    layout: [\n        'grid',\n        'subgrid',\n        'flexbox',\n        'multi_column',\n        'writing_modes',\n        'exclusions',\n        'position_sticky',\n        'logical_properties',\n        'aspect_ratio',\n        'content_visibility',\n    ],\n    shapes_graphics: [\n        'shapes',\n        'object_fit',\n        'clip_path',\n        'masks',\n        'blend_modes',\n        'filter_effects',\n        'backdrop_filter',\n    ],\n    interactions: [\n        'scroll_snap',\n        'overscroll_behavior',\n        'overflow_anchor',\n        'touch_action',\n        'pointer_events',\n    ],\n    typography: [\n        'web_fonts',\n        'variables_fonts',\n        'line_breaking',\n        'font_variant',\n        'initial_letter',\n        'font_variant_numeric',\n        'font_display',\n        'line_clamp',\n        'direction',\n    ],\n    animations_transforms: ['transitions', 'transforms', 'animations', 'perspective'],\n    media_queries: ['prefers_reduced_motion', 'prefers_color_scheme', 'color_gamut'],\n    other_features: [\n        'variables',\n        'feature_support_queries',\n        'containment',\n        'will_change',\n        'calc',\n        'houdini',\n        'comparison_functions',\n    ],\n}\n\nconst colors = {\n    background: '#141435',\n    diagram: '#3a3a75',\n\n    layout: '#b58389',\n    shapes_graphics: '#e8afaf',\n    interactions: '#f1796f',\n    typography: '#d59a6e',\n    animations_transforms: '#ebad36',\n    media_queries: '#74baaf',\n    other_features: '#884b58',\n}\n\nconst generateLinkId = (source, target) => {\n    const parts = [source, target]\n    parts.sort()\n\n    return parts.join('.')\n}\n\nconst RADIUS = 380\n\nconst computeCategory = (categoryId) => {\n    const nodes = []\n    const links = []\n\n    // connect 2 nodes, making sure there's no existing link\n    const connect = (source, target) => {\n        const linkId = generateLinkId(source, target)\n\n        const existingLink = links.find((link) => link.id === linkId)\n        if (existingLink) return\n\n        links.push({\n            id: linkId,\n            source,\n            target,\n        })\n    }\n\n    const featureIds = featuresByCategory[categoryId]\n    featureIds.forEach((featureId, featureIndex) => {\n        nodes.push({\n            type: 'feature',\n            id: featureId,\n            categoryId,\n            radius: 6,\n        })\n\n        if (featureIndex > 0) {\n            const previousFeature = featureIds[featureIndex - 1]\n            connect(previousFeature, featureId)\n        }\n\n        if (Math.random() < 0.5) {\n            const randomSibling = featureIds[random(0, featureIds.length - 1)]\n            if (randomSibling !== featureId) {\n                connect(featureId, randomSibling)\n            }\n        }\n\n        /*\n        if (Math.random() < .1) {\n            featureIds.forEach(target => {\n                if (target !== featureId) {\n                    connect(featureId, target)\n                }\n            })\n        }\n        */\n    })\n\n    const linkForce = forceLink()\n        .id((d) => d.id)\n        .distance(() => {\n            return 60 + Math.random() * 80\n        })\n\n    const chargeForce = forceManyBody().strength(-160).distanceMin(1).distanceMax(200)\n\n    const collisionForce = forceCollide(5).strength(100)\n\n    const centerForce = forceCenter(0, 0)\n\n    const simulation = forceSimulation(nodes)\n        .force('link', linkForce.links(links))\n        .force('charge', chargeForce)\n        .force('center', centerForce)\n        .force('collide', collisionForce)\n        .stop()\n\n    simulation.tick(200)\n\n    const circle = packEnclose(\n        nodes.map((node) => ({\n            x: node.x,\n            y: node.y,\n            r: node.radius,\n        }))\n    )\n\n    const pointsArray = nodes.map((node) => [node.x, node.y])\n    const hull = polygonHull(pointsArray)\n    const centroid = polygonCentroid(hull)\n\n    return {\n        nodes,\n        links,\n        circle,\n        centroid,\n    }\n}\n\nconst computeCategories = () => {\n    const allNodes = []\n    const allLinks = []\n    const categoriesNodes = []\n\n    Object.keys(featuresByCategory).forEach((categoryId) => {\n        const categoryLayout = computeCategory(categoryId)\n        categoriesNodes.push({\n            id: categoryId,\n            type: 'category',\n            categoryId,\n            radius: categoryLayout.circle.r,\n            r: categoryLayout.circle.r + 40,\n            ox: categoryLayout.circle.x,\n            oy: categoryLayout.circle.y,\n            children: categoryLayout,\n            centroid: {\n                x: categoryLayout.centroid[0],\n                y: categoryLayout.centroid[1],\n            },\n        })\n    })\n\n    packSiblings(categoriesNodes)\n\n    categoriesNodes.forEach((categoriesNode) => {\n        const deltaX = categoriesNode.x - categoriesNode.ox\n        const deltaY = categoriesNode.y - categoriesNode.oy\n\n        allNodes.push(categoriesNode)\n\n        categoriesNode.children.nodes.forEach((node) => {\n            node.x += deltaX\n            node.y += deltaY\n\n            allNodes.push(node)\n        })\n\n        categoriesNode.centroid.x += deltaX\n        categoriesNode.centroid.y += deltaY\n\n        categoriesNode.children.links.forEach((link) => {\n            allLinks.push(link)\n        })\n    })\n\n    const circle = packEnclose(\n        categoriesNodes.map((node) => ({\n            x: node.x,\n            y: node.y,\n            r: node.r,\n        }))\n    )\n\n    // adjust positions and sizes to get a constant chart size\n    const sizeRatio = RADIUS / circle.r\n    circle.r = circle.r * sizeRatio\n    allNodes.forEach((node) => {\n        node.x *= sizeRatio\n        node.y *= sizeRatio\n\n        if (node.type === 'category') {\n            node.radius *= sizeRatio\n            node.centroid.x *= sizeRatio\n            node.centroid.y *= sizeRatio\n        }\n    })\n\n    return {\n        nodes: allNodes,\n        links: allLinks,\n        circle,\n        categories: categoriesNodes,\n    }\n}\n\nconst Chart = () => {\n    const { nodes, links, categories } = computeCategories()\n\n    return (\n        <svg\n            width={900}\n            height={900}\n            style={{\n                background: colors.background,\n            }}\n        >\n            <g transform={`translate(450, 450)`}>\n                {categories.map((category) => (\n                    <circle\n                        key={category.id}\n                        cx={category.centroid.x}\n                        cy={category.centroid.y}\n                        r={3}\n                        opacity={0}\n                        fill=\"#ff0000\"\n                    />\n                ))}\n                {Array.from({ length: 6 }, (_, i) => i).map((index) => (\n                    <line\n                        transform={`rotate(${index * 30})`}\n                        key={index}\n                        x1={-RADIUS}\n                        x2={RADIUS}\n                        fill=\"none\"\n                        strokeDasharray=\"3 5\"\n                        stroke={colors.diagram}\n                    />\n                ))}\n                {Array.from({ length: 3 }, (_, i) => i).map((index) => (\n                    <circle\n                        key={index}\n                        r={RADIUS - index * 100}\n                        fill=\"none\"\n                        strokeDasharray=\"3 5\"\n                        stroke={colors.diagram}\n                    />\n                ))}\n                <circle r={RADIUS} fill=\"none\" stroke={colors.diagram} />\n                <circle\n                    r={RADIUS + 4}\n                    fill=\"none\"\n                    stroke={colors.diagram}\n                    strokeWidth={8}\n                    strokeDasharray={`14 14`}\n                />\n                <circle r={RADIUS + 8} fill=\"none\" stroke={colors.diagram} />\n                {links.map((link) => {\n                    return (\n                        <g key={link.id}>\n                            <line\n                                stroke={colors[link.source.categoryId]}\n                                strokeWidth={8}\n                                fill=\"none\"\n                                x1={link.source.x}\n                                x2={link.target.x}\n                                y1={link.source.y}\n                                y2={link.target.y}\n                                opacity={0.1}\n                            />\n                            <line\n                                stroke={colors[link.source.categoryId]}\n                                strokeWidth={2}\n                                fill=\"none\"\n                                x1={link.source.x}\n                                x2={link.target.x}\n                                y1={link.source.y}\n                                y2={link.target.y}\n                                opacity={1}\n                                strokeDasharray=\"3 5\"\n                            />\n                        </g>\n                    )\n                })}\n                {nodes.map((node) => {\n                    if (node.type === 'category') {\n                        return (\n                            <g key={node.id}>\n                                <circle\n                                    fill={colors[node.categoryId]}\n                                    cx={node.x}\n                                    cy={node.y}\n                                    r={node.radius}\n                                    fillOpacity={0}\n                                />\n                            </g>\n                        )\n                    }\n\n                    return (\n                        <g key={node.id}>\n                            <circle\n                                cx={node.x}\n                                cy={node.y}\n                                r={node.radius}\n                                stroke={colors.background}\n                                strokeWidth={12}\n                            />\n                            <circle\n                                fill={colors[node.categoryId]}\n                                cx={node.x}\n                                cy={node.y}\n                                r={node.radius}\n                            />\n                        </g>\n                    )\n                })}\n                {categories.map((category) => (\n                    <Fragment key={category.id}>\n                        {category.children.nodes.map((node) => {\n                            let textAnchor = 'start'\n                            let xOffset = node.radius + 10\n                            if (node.x < category.centroid.x) {\n                                textAnchor = 'end'\n                                xOffset = -xOffset\n                            }\n\n                            return (\n                                <g key={node.id}>\n                                    <text\n                                        x={node.x + xOffset}\n                                        y={node.y}\n                                        textAnchor={textAnchor}\n                                        dominantBaseline=\"central\"\n                                        stroke={colors.background}\n                                        strokeWidth={6}\n                                        strokeLinejoin=\"round\"\n                                        style={{\n                                            fontSize: 10,\n                                            fontWeight: 400,\n                                        }}\n                                    >\n                                        {node.id}\n                                    </text>\n                                    <text\n                                        x={node.x + xOffset}\n                                        y={node.y}\n                                        fill={colors[category.id]}\n                                        textAnchor={textAnchor}\n                                        dominantBaseline=\"central\"\n                                        style={{\n                                            fontSize: 10,\n                                            fontWeight: 400,\n                                        }}\n                                    >\n                                        {node.id}\n                                    </text>\n                                </g>\n                            )\n                        })}\n                    </Fragment>\n                ))}\n                {categories.map((category) => (\n                    <g\n                        key={category.id}\n                        transform={`translate(${category.x}, ${category.y - category.radius - 20})`}\n                    >\n                        <text\n                            fill={colors[category.id]}\n                            stroke={colors.background}\n                            strokeWidth={6}\n                            strokeLinejoin=\"round\"\n                            textAnchor=\"middle\"\n                            style={{\n                                fontWeight: 600,\n                                fontSize: 16,\n                            }}\n                        >\n                            {category.id}\n                        </text>\n                        <text\n                            fill={colors[category.id]}\n                            textAnchor=\"middle\"\n                            style={{\n                                fontWeight: 600,\n                                fontSize: 16,\n                            }}\n                        >\n                            {category.id}\n                        </text>\n                    </g>\n                ))}\n            </g>\n        </svg>\n    )\n}\n\nexport const Constellation = () => {\n    const [token, setToken] = useState(0)\n\n    return (\n        <div>\n            <div>\n                <button\n                    onClick={() => {\n                        setToken((previous) => previous + 1)\n                    }}\n                >\n                    generate\n                </button>\n            </div>\n            <Chart key={token} />\n        </div>\n    )\n}\n","import React from 'react'\nimport { HashRouter as Router, Switch, Route, Link } from 'react-router-dom'\nimport { FeaturesUsageRings } from './charts/features_usage_rings/FeaturesUsageRings'\nimport { Constellation } from './charts/constellation/Constellation'\n\nconst App = () => {\n    return (\n        <Router hashType=\"noslash\">\n            <div>\n                <nav>\n                    <ul>\n                        <li>\n                            <Link to=\"/\">Constellation</Link>\n                        </li>\n                        <li>\n                            <Link to=\"/features-usage-rings\">FeaturesUsageRings</Link>\n                        </li>\n                    </ul>\n                </nav>\n                <Switch>\n                    <Route path=\"/features-usage-rings\">\n                        <FeaturesUsageRings />\n                    </Route>\n                    <Route path=\"/\">\n                        <Constellation />\n                    </Route>\n                </Switch>\n            </div>\n        </Router>\n    )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n        // [::1] is the IPv6 localhost address.\n        window.location.hostname === '[::1]' ||\n        // 127.0.0.0/8 are considered localhost for IPv4.\n        window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n)\n\nexport function register(config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config)\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service ' +\n                            'worker. To learn more, visit https://bit.ly/CRA-PWA'\n                    )\n                })\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config)\n            }\n        })\n    }\n}\n\nfunction registerValidSW(swUrl, config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then((registration) => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing\n                if (installingWorker == null) {\n                    return\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                'New content is available and will be used when all ' +\n                                    'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n                            )\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration)\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.')\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration)\n                            }\n                        }\n                    }\n                }\n            }\n        })\n        .catch((error) => {\n            console.error('Error during service worker registration:', error)\n        })\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl, {\n        headers: { 'Service-Worker': 'script' },\n    })\n        .then((response) => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get('content-type')\n            if (\n                response.status === 404 ||\n                (contentType != null && contentType.indexOf('javascript') === -1)\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then((registration) => {\n                    registration.unregister().then(() => {\n                        window.location.reload()\n                    })\n                })\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config)\n            }\n        })\n        .catch(() => {\n            console.log('No internet connection found. App is running in offline mode.')\n        })\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready\n            .then((registration) => {\n                registration.unregister()\n            })\n            .catch((error) => {\n                console.error(error.message)\n            })\n    }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}